trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~., data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
prediction <- predict(lmModel, newdata = trainData)
ggplot(data = CPUFilter, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "",
x = "", y = "",
color = "")
MAE <- mean(abs(prediction - testData$TDP))
MSE <- mean((prediction - testData$TDP) ^2)
SSR <- sum((prediction - mean(testData$TDP)) ^2)
SST <- sum((testData$TDP - mean(testData$TDP)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
MAE <- mean(abs(prediction - trainData$TDP))
MSE <- mean((prediction - trainData$TDP) ^2)
SSR <- sum((prediction - mean(trainData$TDP)) ^2)
SST <- sum((trainData$TDP - mean(trainData$TDP)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
prediction
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = CPUFilter, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "",
x = "", y = "",
color = "")
MAE <- mean(abs(prediction - testData$TDP))
MSE <- mean((prediction - testData$TDP) ^2)
SSR <- sum((prediction - mean(testData$TDP)) ^2)
SST <- sum((testData$TDP - mean(testData$TDP)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
MAE <- mean(abs(prediction - trainData$TDP))
MSE <- mean((prediction - trainData$TDP) ^2)
SSR <- sum((prediction - mean(trainData$TDP)) ^2)
SST <- sum((trainData$TDP - mean(trainData$TDP)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.7, list = FALSE)
trainData <- CPUFilter[trainIndices, ]  # 70% for train
testData <- CPUFilter[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.8, list = FALSE)
trainData <- CPUFilter[trainIndices, ]  # 70% for train
testData <- CPUFilter[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.8, list = FALSE)
trainData <- CPUFilter[trainIndices, ]  # 70% for train
testData <- CPUFilter[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.8, list = FALSE)
trainData <- CPUFilter[trainIndices, ]  # 70% for train
testData <- CPUFilter[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_line(aes(x = CPUFilter$Cache, y = prediction))
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_line(aes(x = CPUFilter$Cache, y = prediction)) +
# geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_line(aes(x = trainData$Cache, y = prediction)) +
# geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_line(aes(x = Cache, y = prediction)) +
# geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
observerFrame <- data.frame(CPUFilter$TDP, CPUFilter$Cache, CPUFilter$Processor_Base_Frequency)
colnames(observerFrame) <- c("TDP", "Cache", "Processor_Base_Frequency")
trainIndices <- createDataPartition(CPUFilter$TDP, times = 1, p = 0.8, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(TDP~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
geom_line(aes(x = Cache, y = prediction)) +
# geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
# geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = testData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
# geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Test",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = testData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Test",
x = "Cache", y = "Processor_Base_Frequency")
observerFrame <- data.frame(CPUFilter$Recommended_Customer_Price, CPUFilter$Cache, CPUFilter$Processor_Base_Frequency)
colnames(observerFrame) <- c("TDP", "Cache", "Processor_Base_Frequency")
trainIndices <- createDataPartition(CPUFilter$Recommended_Customer_Price, times = 1, p = 0.8, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Recommended_Customer_Price~Cache + Processor_Base_Frequency, data = trainData)
observerFrame <- data.frame(CPUFilter$Recommended_Customer_Price, CPUFilter$Cache, CPUFilter$Processor_Base_Frequency)
colnames(observerFrame) <- c("Recommended_Customer_Price", "Cache", "Processor_Base_Frequency")
trainIndices <- createDataPartition(CPUFilter$Recommended_Customer_Price, times = 1, p = 0.8, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Recommended_Customer_Price~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = testData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Test",
x = "Cache", y = "Processor_Base_Frequency")
observerFrame <- data.frame(CPUFilter$Recommended_Customer_Price, CPUFilter$Cache, CPUFilter$Processor_Base_Frequency)
colnames(observerFrame) <- c("Recommended_Customer_Price", "Cache", "Processor_Base_Frequency")
trainIndices <- createDataPartition(CPUFilter$Recommended_Customer_Price, times = 1, p = 0.8, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Recommended_Customer_Price~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = testData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Test",
x = "Cache", y = "Processor_Base_Frequency")
observerFrame <- data.frame(CPUFilter$Recommended_Customer_Price, CPUFilter$Cache, CPUFilter$Processor_Base_Frequency, CPUFilter$nb_of_Cores)
colnames(observerFrame) <- c("Recommended_Customer_Price", "Cache", "Processor_Base_Frequency", "nb_of_Cores")
trainIndices <- createDataPartition(CPUFilter$Recommended_Customer_Price, times = 1, p = 0.8, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Recommended_Customer_Price~Cache + Processor_Base_Frequency + nb_of_Cores, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
numericalCol = c("Lithography",
"Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Cache",
"TDP",
"T"
)
for (i in 1:length(numericalCol)) {
print(ggplot(data = CPUFilter, aes(x = Vertical_Segment, y = CPUFilter[,numericalCol[i]])) +
geom_boxplot(outlier.colour = "blue", outlier.shape=16, outlier.size=1) +
labs(title = paste("Vertical Segment", numericalCol[i]),
x = "Vertical Segment",
y = numericalCol[i]))
}
t.test(data = CPUFilter, Processor_Base_Frequency, T)
t.test(CPUFilter$Processor_Base_Frequency, CPUFilter$T)
t.test(CPUFilter$Processor_Base_Frequency, CPUFilter$T, paired = TRUE)
t.test(CPUFilter$Processor_Base_Frequency, CPUFilter$T)
t.test(CPUFilter$Processor_Base_Frequency)
anova <- aov(nb_of_Cores~ Vertical_Segment, data=CPUFilter)
summary(anova)
# TukeyHSD(anova)
plot(TukeyHSD(anova))
# Hồi quy tuyến tính Giá với Cache và Base Frequency
observerFrame <- data.frame(CPUFilter$Recommended_Customer_Price, CPUFilter$Cache, CPUFilter$Processor_Base_Frequency)
colnames(observerFrame) <- c("Recommended_Customer_Price", "Cache", "Processor_Base_Frequency")
trainIndices <- createDataPartition(CPUFilter$Recommended_Customer_Price, times = 1, p = 0.8, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Recommended_Customer_Price~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = testData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Test",
x = "Cache", y = "Processor_Base_Frequency")
MAE <- mean(abs(prediction - testData$TDP))
MSE <- mean((prediction - testData$TDP) ^2)
SSR <- sum((prediction - mean(testData$TDP)) ^2)
SST <- sum((testData$TDP - mean(testData$TDP)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
MAE <- mean(abs(prediction - testData$Recommended_Customer_Price))
MSE <- mean((prediction - testData$Recommended_Customer_Price) ^2)
SSR <- sum((prediction - mean(testData$Recommended_Customer_Price)) ^2)
SST <- sum((testData$Recommended_Customer_Price - mean(testData$Recommended_Customer_Price)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
lmModel <- lm(Recommended_Customer_Price~Cache + Processor_Base_Frequency, data = trainData)
# lmModel <- lm(TDP ~ Cache + Processor_Base_Frequency, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = trainData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Train",
x = "Cache", y = "Processor_Base_Frequency")
ggplot(data = testData, aes(x = Cache, y = Processor_Base_Frequency)) +
geom_point(size = 3) +
# geom_line(aes(x = Cache, y = prediction)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Test",
x = "Cache", y = "Processor_Base_Frequency")
plot(lmModel)
