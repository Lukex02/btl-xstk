### Non handling data
# Vertical_Segment
# Status
# nb_of_Cores
### Data handling
# Product_Collection
CPUFilter$Processor_Collection <- NULL
# Processor_Number
CPUFilter$Processor_Number <- NULL
# Launch_Date
CPUFilter$Launch_Date <- NULL
# Lithography
CPUFilter$Lithography <- as.double(gsub(" nm", "", CPUFilter$Lithography))
# Replace NA with median value
CPUFilter$Lithography[is.na(CPUFilter$Lithography)] = median(CPUFilter$Lithography, na.rm = T)
# Recommended_Customer_Price
CPUFilter$Recommended_Customer_Price <- as.double(sub("\\$", "", CPUFilter$Recommended_Customer_Price))
CPUFilter$Recommended_Customer_Price <- as.double(CPUFilter$Recommended_Customer_Price)
# Replace NA with median value
CPUFilter$Recommended_Customer_Price[is.na(CPUFilter$Recommended_Customer_Price)] = median(CPUFilter$Recommended_Customer_Price, na.rm = T)
# nb_of_Threads
CPUFilter$nb_of_Threads[is.na(CPUFilter$nb_of_Threads)] = median(CPUFilter$nb_of_Threads, na.rm = T)
# Processor_Base_Frequency
CPUFilter$Processor_Base_Frequency <- as.double(gsub(" GHz", "", CPUFilter$Processor_Base_Frequency))
# Replace NA with median value
CPUFilter$Processor_Base_Frequency[is.na(CPUFilter$Processor_Base_Frequency)] = median(CPUFilter$Processor_Base_Frequency, na.rm = T)
# Cache
CPUFilter$Cache <- as.double(gsub(" MB .*", "", CPUFilter$Cache))
# Replace NA with median value
CPUFilter$Cache[is.na(CPUFilter$Cache)] = median(CPUFilter$Cache, na.rm = T)
#print(CPUFilter$Cache)
# Bus_Speed
CPUFilter$Bus_Speed <- NULL
# TDP
CPUFilter$TDP <- as.double(gsub(" W", "", CPUFilter$TDP))
# Replace NA with median value
CPUFilter$TDP[is.na(CPUFilter$TDP)] = median(CPUFilter$TDP, na.rm = T)
#print(CPUFilter$Cache)
# Embedded_Options_Available
CPUFilter$Embedded_Options_Available <- NULL
# Conflict_Free
CPUFilter$Conflict_Free <- NULL
# T
CPUFilter$T <- as.double(gsub(" Â°C", "", CPUFilter$T))
# Replace NA with median value
CPUFilter$T[is.na(CPUFilter$T)] = median(CPUFilter$T, na.rm = T)
#print(CPUFilter$Cache)
# Intel_Hyper_Threading_Technology_
CPUFilter$Intel_Hyper_Threading_Technology_ <- ifelse(CPUFilter$Intel_Hyper_Threading_Technology_ == 'Yes', 1, 0)
# Intel_Virtualization_Technology_VTx_
CPUFilter$Intel_Virtualization_Technology_VTx_ <- ifelse(CPUFilter$Intel_Virtualization_Technology_VTx_ == 'Yes', 1, 0)
# Intel_64_
CPUFilter$Intel_64_ <- ifelse(CPUFilter$Intel_64_ == 'Yes', 1, 0)
# Instruction_Set
CPUFilter$Instruction_Set <- NULL
# Idle_States
CPUFilter$Idle_States <- ifelse(CPUFilter$Idle_States == 'Yes', 1, 0)
# Execute_Disable_Bit
CPUFilter$Execute_Disable_Bit <- ifelse(CPUFilter$Execute_Disable_Bit == 'Yes', 1, 0)
numericalCol = c("Lithography",
"Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Cache",
"TDP",
"T")
nameCol = c("Vertical_Segment")
boolCol = c("Intel_Hyper_Threading_Technology_",
"Intel_Virtualization_Technology_VTx_",
"Intel_64_",
"Idle_States",
"Execute_Disable_Bit")
########### Thống kê tả ###########
# Thống kê của dữ liệu số
numCount <- length(CPUFilter[[1]])
numMean <- apply(CPUFilter[,numericalCol], 2, mean)
numMedian <- apply(CPUFilter[,numericalCol], 2, median)
numSd <- apply(CPUFilter[,numericalCol], 2, sd)
numMin <- apply(CPUFilter[,numericalCol], 2, min)
numMax <- apply(CPUFilter[,numericalCol], 2, max)
summaryNumeric <- data.frame(numCount, numMean, numMedian, numSd, numMin, numMax)
colnames(summaryNumeric) <- c("Count", "Mean", "Median", "Sd", "Min", "Max")
for (i in 1:length(numericalCol)) {
histData <- CPUFilter[[numericalCol[i]]]
hist(histData,
main = paste("Histogram of", names(CPUFilter)[which(names(CPUFilter)==numericalCol[i])]),
labels = TRUE,
col = "darkmagenta",
xlab = names(CPUFilter)[which(names(CPUFilter)==numericalCol[i])],
breaks = 10)
}
# Thống kê dữ liệu tên/mã hiệu
for (i in 1:length(nameCol)) {
barData <- table(CPUFilter[[nameCol[i]]])
barplot(barData,
xlab = names(CPUFilter)[which(names(CPUFilter) == nameCol[i])],
ylab = "Frequency",
main = paste("Barplot of", names(CPUFilter)[which(names(CPUFilter)==nameCol[i])]),
)
}
# Thống kê dữ liệu bool
for (i in 1:length(boolCol)) {
pieData <- CPUFilter[[boolCol[i]]]
pie(pieData, col = "blue",
labels = boolCol[i],
radius = 0,
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- CPUFilter[[boolCol[i]]]
pie(pieData, col = "blue",
labels = boolCol[i],
radius = 0,
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- CPUFilter[[boolCol[i]]]
pie(pieData, col = "blue",
labels = boolCol[i],
radius = 0,
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- CPUFilter[[boolCol[i]]]
pie(pieData, col = "blue",
labels = boolCol[i],
radius = 0,
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- CPUFilter[[boolCol[i]]]
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
# Install package for first run
# install.packages("stringr")
# install.packages("tidyr")
# install.packages("dplyr")
# install.packages("zoo")
# install.packages("Metrics")
# install.packages("caret")
# install.packages("MASS")
# install.packages("ggplot2")
# install.packages("reshape2")
# install.packages("mltools")
# install.packages("DescTools")
# install.packages("plotly")
# Load packages
library(stringr)
# library(tidyr)
# library(dplyr)
# library(zoo)
# library(Metrics)
# library(caret)
# library(MASS)
# library(ggplot2)
# library(reshape2)
# library(mltools)
# library(DescTools)
# library(plotly)
# Read datas
CPU = read.csv("./cpus.csv", header = TRUE, na.strings = c("N/A", ""))
CPUAnalyze = CPU[,c("Product_Collection", "Vertical_Segment"
, "Processor_Number", "Status", "Launch_Date"
, "Lithography", "Recommended_Customer_Price"
, "nb_of_Cores", "nb_of_Threads"
, "Processor_Base_Frequency", "Cache"
, "Bus_Speed", "TDP", "Embedded_Options_Available"
, "Max_Memory_Size", "Memory_Types"
, "Max_nb_of_Memory_Channels", "T"
, "Intel_Hyper_Threading_Technology_"
, "Intel_Virtualization_Technology_VTx_"
, "Intel_64_", "Instruction_Set"
, "Idle_States", "Thermal_Monitoring_Technologies"
, "Execute_Disable_Bit")]
# Print summary datas
# print(summary(CPUAnalyze))
########### Tiền xử lý dữ liệu ###########
# Filtering variables
na <- sapply(CPUAnalyze, function(x) sum(is.na(x)) / length(x))
filterColumns <- names(na[na <= 0.25])
# Create new data
CPUFilter <- CPUAnalyze[, filterColumns]
#print(summary(CPUFilter))
### Non handling data
# Vertical_Segment
# Status
# nb_of_Cores
### Data handling
# Product_Collection
CPUFilter$Processor_Collection <- NULL
# Processor_Number
CPUFilter$Processor_Number <- NULL
# Launch_Date
CPUFilter$Launch_Date <- NULL
# Lithography
CPUFilter$Lithography <- as.double(gsub(" nm", "", CPUFilter$Lithography))
# Replace NA with median value
CPUFilter$Lithography[is.na(CPUFilter$Lithography)] = median(CPUFilter$Lithography, na.rm = T)
# Recommended_Customer_Price
CPUFilter$Recommended_Customer_Price <- as.double(sub("\\$", "", CPUFilter$Recommended_Customer_Price))
CPUFilter$Recommended_Customer_Price <- as.double(CPUFilter$Recommended_Customer_Price)
# Replace NA with median value
CPUFilter$Recommended_Customer_Price[is.na(CPUFilter$Recommended_Customer_Price)] = median(CPUFilter$Recommended_Customer_Price, na.rm = T)
# nb_of_Threads
CPUFilter$nb_of_Threads[is.na(CPUFilter$nb_of_Threads)] = median(CPUFilter$nb_of_Threads, na.rm = T)
# Processor_Base_Frequency
CPUFilter$Processor_Base_Frequency <- as.double(gsub(" GHz", "", CPUFilter$Processor_Base_Frequency))
# Replace NA with median value
CPUFilter$Processor_Base_Frequency[is.na(CPUFilter$Processor_Base_Frequency)] = median(CPUFilter$Processor_Base_Frequency, na.rm = T)
# Cache
CPUFilter$Cache <- as.double(gsub(" MB .*", "", CPUFilter$Cache))
# Replace NA with median value
CPUFilter$Cache[is.na(CPUFilter$Cache)] = median(CPUFilter$Cache, na.rm = T)
#print(CPUFilter$Cache)
# Bus_Speed
CPUFilter$Bus_Speed <- NULL
# TDP
CPUFilter$TDP <- as.double(gsub(" W", "", CPUFilter$TDP))
# Replace NA with median value
CPUFilter$TDP[is.na(CPUFilter$TDP)] = median(CPUFilter$TDP, na.rm = T)
#print(CPUFilter$Cache)
# Embedded_Options_Available
CPUFilter$Embedded_Options_Available <- NULL
# Conflict_Free
CPUFilter$Conflict_Free <- NULL
# T
CPUFilter$T <- as.double(gsub(" Â°C", "", CPUFilter$T))
# Replace NA with median value
CPUFilter$T[is.na(CPUFilter$T)] = median(CPUFilter$T, na.rm = T)
#print(CPUFilter$Cache)
# Intel_Hyper_Threading_Technology_
# CPUFilter$Intel_Hyper_Threading_Technology_ <- ifelse(CPUFilter$Intel_Hyper_Threading_Technology_ == 'Yes', 1, 0)
# Intel_Virtualization_Technology_VTx_
# CPUFilter$Intel_Virtualization_Technology_VTx_ <- ifelse(CPUFilter$Intel_Virtualization_Technology_VTx_ == 'Yes', 1, 0)
# Intel_64_
# CPUFilter$Intel_64_ <- ifelse(CPUFilter$Intel_64_ == 'Yes', 1, 0)
# Instruction_Set
CPUFilter$Instruction_Set <- NULL
# Idle_States
# CPUFilter$Idle_States <- ifelse(CPUFilter$Idle_States == 'Yes', 1, 0)
# Execute_Disable_Bit
# CPUFilter$Execute_Disable_Bit <- ifelse(CPUFilter$Execute_Disable_Bit == 'Yes', 1, 0)
numericalCol = c("Lithography",
"Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Cache",
"TDP",
"T")
nameCol = c("Vertical_Segment")
boolCol = c("Intel_Hyper_Threading_Technology_",
"Intel_Virtualization_Technology_VTx_",
"Intel_64_",
"Idle_States",
"Execute_Disable_Bit")
########### Thống kê tả ###########
# Thống kê của dữ liệu số
numCount <- length(CPUFilter[[1]])
numMean <- apply(CPUFilter[,numericalCol], 2, mean)
numMedian <- apply(CPUFilter[,numericalCol], 2, median)
numSd <- apply(CPUFilter[,numericalCol], 2, sd)
numMin <- apply(CPUFilter[,numericalCol], 2, min)
numMax <- apply(CPUFilter[,numericalCol], 2, max)
summaryNumeric <- data.frame(numCount, numMean, numMedian, numSd, numMin, numMax)
colnames(summaryNumeric) <- c("Count", "Mean", "Median", "Sd", "Min", "Max")
for (i in 1:length(numericalCol)) {
histData <- CPUFilter[[numericalCol[i]]]
hist(histData,
main = paste("Histogram of", names(CPUFilter)[which(names(CPUFilter)==numericalCol[i])]),
labels = TRUE,
col = "darkmagenta",
xlab = names(CPUFilter)[which(names(CPUFilter)==numericalCol[i])],
breaks = 10)
}
# Thống kê dữ liệu tên/mã hiệu
for (i in 1:length(nameCol)) {
barData <- table(CPUFilter[[nameCol[i]]])
barplot(barData,
xlab = names(CPUFilter)[which(names(CPUFilter) == nameCol[i])],
ylab = "Frequency",
main = paste("Barplot of", names(CPUFilter)[which(names(CPUFilter)==nameCol[i])]),
)
}
# Thống kê dữ liệu bool
for (i in 1:length(boolCol)) {
pieData <- CPUFilter[[boolCol[i]]]
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- apply(table(CPUFilter[[boolCol[i]]]))
print(pieData[,1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[,1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
# Thống kê dữ liệu bool
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[[1]])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[[,1]])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[, [1]])
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[[]])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[[1:2]])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[1,])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[1][1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[1][1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[2][1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[][2])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[][1])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(pieData[[1]])
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
print(c(pieData[[1]], pieData[[2]]))
# pie(pieData, col = "blue",
#     labels = boolCol[i],
#     radius = 0,
#     col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = "blue",
labels = boolCol[i],
radius = 0,
col.main = "black")
}
for (i in 1:length(numericalCol)) {
histData <- CPUFilter[[numericalCol[i]]]
hist(histData,
main = paste("Histogram of", names(CPUFilter)[which(names(CPUFilter)==numericalCol[i])]),
labels = TRUE,
col = "darkmagenta",
xlab = names(CPUFilter)[which(names(CPUFilter)==numericalCol[i])],
breaks = 10)
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = "blue",
labels = boolCol[i],
radius = -1,
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
# pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = "blue",
labels = boolCol[i],
radius = -1,
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
# pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = "blue",
labels = names(pieData),
radius = -1,
main = boolCol[i],
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
# pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = "blue", "red",
labels = names(pieData),
radius = -1,
main = boolCol[i],
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
# pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = c("blue", "red"),
labels = names(pieData),
radius = -1,
main = boolCol[i],
col.main = "black")
}
for (i in 1:length(boolCol)) {
pieData <- table(CPUFilter[[boolCol[i]]])
# pieData <- c(pieData[[1]], pieData[[2]])
# print(c(pieData[[1]], pieData[[2]]))
pie(pieData, col = c("red", "green"),
labels = names(pieData),
radius = -1,
main = boolCol[i],
col.main = "black")
}
