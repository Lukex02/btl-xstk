# TDP - Cores
ggplot(data = CPUFilter, aes(x = nb_of_Cores, y = TDP)) +
geom_violin() +
geom_smooth(method = "gam") +
labs(title = "Relationship between number of Cores - TDP",
x = "number of Cores",
y = "TDP")
# TDP - Threads
ggplot(data = CPUFilter, aes(x = nb_of_Threads, y = TDP)) +
geom_violin() +
geom_smooth(method = "gam") +
labs(title = "Relationship between number of Threads - TDP",
x = "number of Threads",
y = "TDP")
# Cache - Cores
ggplot(data = CPUFilter, aes(x = nb_of_Cores, y = Cache)) +
geom_jitter() +
geom_smooth(method = "gam") +
labs(title = "Relationship between number of Cores - Cache",
x = "number of Cores",
y = "Cache")
# Cache - Threads
ggplot(data = CPUFilter, aes(x = nb_of_Threads, y = Cache)) +
geom_jitter() +
geom_smooth(method = "gam") +
labs(title = "Relationship between number of Cores - Cache",
x = "number of Threads",
y = "Cache")
# Processor Base Freq - TDP
ggplot(data = CPUFilter, aes(x = Processor_Base_Frequency, y = TDP)) +
geom_area() +
geom_smooth(method = "gam") +
labs(title = "Relationship between number of Base Frequency - TDP",
x = "Processor Base Frequency",
y = "TDP")
########### Thống kê suy diễn ###########
#
anova <- aov(Product_Collection~ nb_of_Threads, data=CPUFilter)
anova <- aov(Product_Collection~ nb_of_Threads, data=CPUFilter)
anova <- aov(Vertical_Segment~ nb_of_Cores, data=CPUFilter)
anova <- aov(nb_of_Cores~ Vertical_Segment, data=CPUFilter)
anova <- aov(nb_of_Cores~ Vertical_Segment, data=CPUFilter)
summary(anova)
anova <- aov(nb_of_Cores~ Vertical_Segment, data=CPUFilter)
TukeyHSD(anova)
plot(TukeyHSD(anova))
anova <- aov(nb_of_Cores~ Product_Collection, data=CPUFilter)
TukeyHSD(anova)
plot(TukeyHSD(anova))
anova <- aov(nb_of_Cores~ Product_Collection, data=CPUFilter)
# TukeyHSD(anova)
plot(TukeyHSD(anova))
summary(anova)
plot(CPUFilter$nb_of_Cores, CPUFilter$nb_of_Threads,
xlab="Cores", ylab="Threads",
main="Cores - Threads",
col='blue')
lmModel <- lm(CPUFilter$nb_of_Cores, CPUFilter$nb_of_Threads,
xlab="Cores", ylab="Threads",
main="Cores - Threads",
col='blue')
lmModel <- lm(formula = nb_of_Cores ~ nb_of_Threads, data = CPUFilter,
xlab="Cores", ylab="Threads",
main="Cores - Threads",
col='blue')
lmModel <- lm(formula = nb_of_Cores ~ nb_of_Threads, data = CPUFilter)
# xlab="Cores", ylab="Threads",
# main="Cores - Threads",
# col='blue')
lmModel <- lm(formula = nb_of_Cores ~ nb_of_Threads, data = CPUFilter)
# xlab="Cores", ylab="Threads",
# main="Cores - Threads",
# col='blue')
summary(lmModel)
lmModel <- lm(formula = nb_of_Cores+Vetical_Segment ~ nb_of_Threads, data = CPUFilter)
lmModel <- lm(nb_of_Cores+Vetical_Segment ~ nb_of_Threads, data = CPUFilter)
lmModel <- lm(nb_of_Cores+Vertical_Segment ~ nb_of_Threads, data = CPUFilter)
plot(CPUFilter$nb_of_Cores, CPUFilter$Cache,
xlab="Cores", ylab="Threads",
main="Cores - Threads",
col='blue')
plot(CPUFilter$nb_of_Cores, CPUFilter$TDP,
xlab="Cores", ylab="Threads",
main="Cores - Threads",
col='blue')
plot(CPUFilter$nb_of_Cores, CPUFilter$T,
xlab="Cores", ylab="Threads",
main="Cores - Threads",
col='blue')
lmModel <- lm(Processor_Base_Frequency, data = CPUFilter)
lmModel <- lm(Processor_Base_Frequency~., data = CPUFilter)
summary(lmModel)
lmModel <- lm(Processor_Base_Frequency~., data = CPUFilter)
summary(lmModel)
trainIndices <- createDataPartition(CPUFilter$Processor_Base_Frequency, times = 1, p = 0.7, list=FALSE)
trainData <- CPUFilter[trainIndices, ]
testData <- CPUFilter[-trainIndices, ]
nrow(trainData)
nrow(testData)
trainIndices <- createDataPartition(CPUFilter$Processor_Base_Frequency, times = 1, p = 0.7, list = FALSE)
trainData <- CPUFilter[trainIndices, ]  # 70% for train
testData <- CPUFilter[-trainIndices, ]  # 30% for test
trainIndices <- createDataPartition(CPUFilter$Processor_Base_Frequency, times = 1, p = 0.7, list = FALSE)
trainData <- CPUFilter[trainIndices, ]  # 70% for train
testData <- CPUFilter[-trainIndices, ]  # 30% for test
# nrow(trainData)
# nrow(testData)
lmModel <- lm(Processor_Base_Frequency~., data = CPUFilter)
summary(lmModel)
predTrain <- predict(lmModel, newdata = trainData)
lmModel <- lm(Processor_Base_Frequency~., data = CPUFilter)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
head(trainData)
lmModel <- lm(Processor_Base_Frequency~nb_of_Cores, data = CPUFilter)
summary(lmModel)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
print(predTrain)
head(predTrain)
head(predTest)
lmModel <- lm(Processor_Base_Frequency~nb_of_Cores+TDP, data = CPUFilter)
predTrain <- predict(lmModel, newdata = trainData)
predTest <- predict(lmModel, newdata = testData)
ggplot(data = CPUFilter, aes(x = nb_of_Cores, y = TDP)) +
geom_violin() +
geom_smooth(method = "lm") +
labs(title = "Relationship between number of Cores - TDP",
x = "number of Cores",
y = "TDP")
# TDP - Threads
ggplot(data = CPUFilter, aes(x = nb_of_Threads, y = TDP)) +
geom_violin() +
geom_smooth(method = "lm") +
labs(title = "Relationship between number of Threads - TDP",
x = "number of Threads",
y = "TDP")
# Cache - Cores
ggplot(data = CPUFilter, aes(x = nb_of_Cores, y = Cache)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title = "Relationship between number of Cores - Cache",
x = "number of Cores",
y = "Cache")
# Cache - Threads
ggplot(data = CPUFilter, aes(x = nb_of_Threads, y = Cache)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title = "Relationship between number of Cores - Cache",
x = "number of Threads",
y = "Cache")
# Processor Base Freq - TDP
ggplot(data = CPUFilter, aes(x = Processor_Base_Frequency, y = TDP)) +
geom_area() +
geom_smooth(method = "lm") +
labs(title = "Relationship between number of Base Frequency - TDP",
x = "Processor Base Frequency",
y = "TDP")
ggplot(data = CPUFilter$Processor_Base_Frequency, aes(x = nb_of_Cores, y = TDP), color = 'blue') +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = CPUFilter$Processor_Base_Frequency+nb_of_Cores+TDP, aes(x = nb_of_Cores, y = TDP), color = 'blue') +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$nb_of_Cores, CPUFilter$TDP)
View(observerFrame)
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$nb_of_Cores, CPUFilter$TDP)
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP), color = 'blue') +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$nb_of_Cores, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "nb_of_Cores", "TDP")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP), color = 'blue') +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = blue)) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = humidity)) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "GHz") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = 'blue') +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "yellow", high = "purple")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "limegreen", high = "darkgreen")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "lightblue", high = "darkblue")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "blue", high = "blue")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = 'blue')) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP, color = blue)) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point(aes(color = "Ghz")) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point(aes(color = Ghz)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point(aes(color = z2)) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)") +
scale_color_gradient(low = "white", high = "black")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point() +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)")
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)")
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$nb_of_Cores, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "nb_of_Cores", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~nb_of_Cores+TDP, data = trainData)
summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$nb_of_Cores, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "nb_of_Cores", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~nb_of_Cores+TDP, data = trainData)
# summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = trainData)
ggplot(data = observerFrame, aes(x = nb_of_Cores, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
# Hồi quy tuyến tính Base Freq với Cores và TDP
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$Lithography, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "Lithography", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~Lithography+TDP, data = trainData)
# summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = trainData)
ggplot(data = observerFrame, aes(x = Lithography, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on number of Cores and TDP",
x = "number of Cores (cores)", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
# Hồi quy tuyến tính Base Freq với Cores và TDP
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$Lithography, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "Lithography", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~Lithography+TDP, data = trainData)
# summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = trainData)
ggplot(data = observerFrame, aes(x = Lithography, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on Lithography and TDP",
x = "Lithography (nm))", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
# Hồi quy tuyến tính Base Freq với Cores và TDP
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$Lithography, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "Lithography", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~Lithography+TDP, data = trainData)
# summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = trainData)
ggplot(data = observerFrame, aes(x = Lithography, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on Lithography and TDP",
x = "Lithography (nm)", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$Lithography, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "Lithography", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$Lithography, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "Lithography", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~Lithography+TDP, data = trainData)
# summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = testData)
ggplot(data = observerFrame, aes(x = Lithography, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on Lithography and TDP",
x = "Lithography (nm)", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
observerFrame <- data.frame(CPUFilter$Processor_Base_Frequency, CPUFilter$Lithography, CPUFilter$TDP)
colnames(observerFrame) <- c("Processor_Base_Frequency", "Lithography", "TDP")
trainIndices <- createDataPartition(observerFrame, times = 1, p = 0.7, list = FALSE)
trainData <- observerFrame[trainIndices, ]  # 70% for train
testData <- observerFrame[-trainIndices, ]  # 30% for test
# head(trainData)
# nrow(testData)
#----Random forest >>> lm (Linear Regression - Hồi quy tuyến tính)----#
lmModel <- lm(Processor_Base_Frequency~Lithography+TDP, data = trainData)
# summary(lmModel)
# predTrain <- predict(lmModel, newdata = trainData)
# predTest <- predict(lmModel, newdata = testData)
prediction <- predict(lmModel, newdata = trainData)
ggplot(data = observerFrame, aes(x = Lithography, y = TDP)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = 'red', formula = y ~ x) +
labs(title = "Processor Base Frequency based on Lithography and TDP",
x = "Lithography (nm)", y = "TDP (W)",
color = "Blue (Ghz)")
MAE <- mean(abs(prediction - testData$Processor_Base_Frequency))
MSE <- mean((prediction - testData$Processor_Base_Frequency) ^2)
SSR <- sum((prediction - mean(testData$Processor_Base_Frequency)) ^2)
SST <- sum((testData$Processor_Base_Frequency - mean(testData$Processor_Base_Frequency)) ^2)
RSquared <- SSR/SST
print(paste("Sai số tuyệt đối trung bình:", MAE))
print(paste("Sai số toàn phương trung bình:", MSE))
print(paste("R Bình Phương:", RSquared))
